// Variables
$primary: hsl(178, 60%, 77%);
$secondary: hsl(37, 87%, 88%);
$tertiary: hsl(350, 100%, 84%);

$text-dark: hsl(0, 0%, 30%);
$text-light: hsl(0, 0%, 100%);

$button-width: 150px;

// Mixin is basically a reusable piece of code.

@mixin clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}

@mixin style-link-text($color) {
  text-decoration: none;
  text-transform: uppercase;
  text-align: center;
  color: $color;
}

@function divide($a, $b) {
  @return $a / $b
}

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Roboto", sans-serif;
}

nav {
  margin: 30px;
  background-color: $primary;

  @include clearfix;
}

.navigation {
  float: left;
  list-style: none;

  li {
    display: inline-block;

    &:not(:first-child) {
      margin-left: divide(40, 2) * 1px;
    }

    & > a {
      @include style-link-text($text-light);
    }
  }
}

.buttons {
  float: right;
}

// This is a placeholder. Its functionality is really similar to a mixin
// However, a mixin copies the content into where it's applied, the extent,
// Replaces the selector with the placeholder. So if multiple rules uses an
// placeholder, it'll not copy them, but kind of create a multiple selector.
// See compiled code.
%btn-placeholder {
  display: inline-block;
  padding: 10px;
  width: $button-width;
  border-radius: 50px;

  @include style-link-text($text-dark);
}

.btn-main {
  &:link {
    // How to apply an placeholder/extend it
    @extend %btn-placeholder;
    background-color: $secondary;
  }
  &:hover {
    background-color: darken($secondary, 10%);
  }
}

.btn-hot {
  &:link {
    @extend %btn-placeholder;
    background-color: $tertiary;
  }
  &:hover {
    background-color: lighten($tertiary, 5%);
  }
}
