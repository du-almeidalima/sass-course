@use "../abstract/variables" as vars;
@use "../abstract/mixins";

.row {
  max-width: 114rem;
  margin: 0 auto;

  @include mixins.clearfix;

  &:not(:last-of-type) {
    margin-bottom: vars.$grid-vertical-gutter;
  }

  // COLUMNS

  // This selector works like a RegEx for class matching
  // - "^" for 'starts with'
  // - "$" for 'ends with'
  [class^="col-"] {
    float: left;
    &:not(:last-of-type) {
      margin-right: vars.$grid-horizontal-gutter;
    }
  }

  // Using Sass @for

  @for $cols from 1 through 6 {
    @for $col from 1 through $cols {

      @if $col != $cols {
        .col-#{$col}-of-#{$cols} {
          $col-width: calc(((100% - #{$cols - 1} * #{vars.$grid-horizontal-gutter}) / #{$cols}));
          $gutter-addition: calc(#{$col - 1} * #{vars.$grid-horizontal-gutter});

          width: calc(#{$col-width} * #{$col} + #{$gutter-addition});
        }
      }
    }
  }

  // Using manual approach
  //.col-1-of-1 {
  //  width: 100%;
  //}
  //
  //.col-1-of-2 {
  //  width: calc((100% - #{vars.$grid-horizontal-gutter}) / 2);
  //}
  //
  //.col-1-of-3 {
  //  width: calc((100% - 2 * #{vars.$grid-horizontal-gutter}) / 3);
  //}
  //
  //// Two 1/3 cols + gutter
  //.col-2-of-3 {
  //  width: calc(((100% - 2 * #{vars.$grid-horizontal-gutter}) / 3) * 2 + #{vars.$grid-horizontal-gutter});
  //}
  //
  //.col-1-of-4 {
  //  width: calc((100% - 3 * #{vars.$grid-horizontal-gutter}) / 4);
  //}
  //
  //// Two 2/4 cols + gutter
  //.col-2-of-4 {
  //  width: calc(((100% - 3 * #{vars.$grid-horizontal-gutter}) / 4) * 2 + #{vars.$grid-horizontal-gutter});
  //}
  //
  //// Two 2/4 cols + 2 * gutter
  //.col-3-of-4 {
  //  width: calc(((100% - 3 * #{vars.$grid-horizontal-gutter}) / 4) * 3 + 2 * #{vars.$grid-horizontal-gutter});
  //}
}
